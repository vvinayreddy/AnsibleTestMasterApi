var request = require("request");
var util = require('util');


function sharepointClient() {
  this.config = undefined;
}

sharepointClient.prototype.init = function (config, cb) {
  this.config = config;

  var j = request.jar();
  var cookiertFa = request.cookie(config.rtfaCookie);
  var cookiefedAuth = request.cookie(config.FedAuthCookie);

  j.setCookie(cookiertFa, config.url);
  j.setCookie(cookiefedAuth, config.url);

  this.options = {
    method: 'GET',
    url: config.url,
    qs: {
      querytext: ''
    },
    jar: j,
    headers: {
      'cache-control': 'no-cache',
      'content-type': 'application/json',
      accept: 'application/json'
    }
  };
}

sharepointClient.prototype.search = function (searchTerm, cb) {
  this.options.qs.querytext = util.format('\'%s\'', searchTerm);
  request(this.options, function (error, response, body) {
    if (error)
      cb(err);
    else {
      try {
        var jsonBody = JSON.parse(body)
        var searchResults = [];

        if (jsonBody['odata.error']) {
          cb(new Error(jsonBody['odata.error'].message.value))
        } else {
          jsonBody.PrimaryQueryResult.RelevantResults.Table.Rows.forEach(function (item) {
            searchResults.push({
              rank: item.Cells.find(o => o.Key === 'Rank').Value,
              Title: item.Cells.find(o => o.Key === 'Title').Value,
              Link: item.Cells.find(o => o.Key === 'Path').Value,
              Description: item.Cells.find(o => o.Key === 'Description').Value,
              SiteName: item.Cells.find(o => o.Key === 'SiteName').Value,
              FileType: item.Cells.find(o => o.Key === 'FileType').Value,
              FileExtension: item.Cells.find(o => o.Key === 'FileExtension').Value,
              Author: item.Cells.find(o => o.Key === 'Author').Value,
              Summary: item.Cells.find(o => o.Key === 'HitHighlightedSummary').Value,
              LastModifiedTime: item.Cells.find(o => o.Key === 'LastModifiedTime').Value,
              ContentClass: item.Cells.find(o => o.Key === 'contentclass').Value
            })

          });
          cb(undefined, {
            count: jsonBody.PrimaryQueryResult.RelevantResults.Table.Rows.length,
            results: searchResults
          })
        }
      } catch (e) {
        logger.error('Error performing Search', e, body)
        cb(e)
      }
    }
  });
}


module.exports = sharepointClient;