'use strict';

var request = require('request');
var util = require('util');
var logger = require('log4js').getLogger('ChatClient');

var rocket_user = '';
var rocket_password = '';
var rocket_url = '';
var message_format = '';
var login_request = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/json'
    },
    url: '',
    json: {
        username: this.rocket_user,
        password: this.ocket_password
    }
};
var message_post_request = {
    url: '',
    headers: {
        'Content-Type': 'application/json'
    },
    method: "POST",
    json: {}
};

var create_room_request = {
    url: '',
    headers: {
        'Content-Type': 'application/json'
    },
    method: "POST",
    json: {}
};

var userSession_Request = {
    url: '',
    headers: {
        'Content-Type': 'application/json'
    },
    method: "GET",
    json: true
};
var messageObj = {

    attachments: {}
};

function RocketClient(config) {
    this.rocket_user = config.user;
    this.rocket_password = config.password;
    this.rocket_url = config.url;


    login_request.json.username = config.user;
    login_request.json.password = config.password;
    login_request.url = util.format('%s/api/v1/login', config.url);

};

RocketClient.prototype.login = function (reqObj, cb) {

    logger.debug('login_request',login_request)
    request(login_request, function (err, res) {

        if (err) {
            logger.error("error while logging to rocket chat " , err)
            cb(err);
        } else {
            if (!reqObj.headers) {
                reqObj.headers = {};
            }
            //console.log('auth response', res.body)
            if (res.body.status === 'error') {
                cb(new Error(res.body.message));
            } else {
                reqObj.headers['X-Auth-Token'] = res.body.data.authToken;
                reqObj.headers['X-User-Id'] = res.body.data.userId;
                cb(err, reqObj);
            }
        }

    });
};



RocketClient.prototype.createRoom = function (roomObj, cb) {
    create_room_request.json = roomObj;

    this.login(create_room_request, function (err, reqEnriched) {
        reqEnriched.headers['Content-Type'] = 'application/json';
        request(reqEnriched, cb);
    });
};

RocketClient.prototype.sendMessage = function (roomId, message, cb) {

    message_post_request.url = util.format('%s/api/v1/chat.postMessage',
        this.rocket_url);

    messageObj.msg = message;
    messageObj.roomId = roomId;

    //messageObj.attachments = message;

    message_post_request.json = messageObj;

    this.login(message_post_request, function (err, reqEnriched) {
        if(err)
         cb(err)
        else {
        //reqEnriched.headers['Content-Type'] = 'application/json';
        //console.log(util.inspect(reqEnriched));
        request(reqEnriched, cb);
        }
    });


};

RocketClient.prototype.postMessage = function ( message, cb) {

    message_post_request.url = util.format('%s/api/v1/chat.postMessage',
        this.rocket_url);

    message_post_request.json = message;

    this.login(message_post_request, function (err, reqEnriched) {
        if(err)
         cb(err)
        else {
        //reqEnriched.headers['Content-Type'] = 'application/json';
        //console.log(util.inspect(reqEnriched));
        request(reqEnriched, cb);
        }
    });
};

RocketClient.prototype.userSession = function (username, cb) {

    userSession_Request.url = util.format('%s/api/v1/users.session?username=%s',
        this.rocket_url,username);

    this.login(userSession_Request, function (err, reqEnriched) {
        if(err)
             cb(err)
        else {       
            logger.debug('userSession Request',reqEnriched)
            request(reqEnriched, cb);
        }
    });


};




exports = module.exports = RocketClient;