var kafka = require('kafka-node');
var Producer = kafka.Producer;
var Client = kafka.Client;
var logger = require('log4js').getLogger('streamPublisher');
var ObjectID = require("bson-objectid");
const os = require('os');


var streamPublisher = function (config) {

    if (!config)
        return this;
    else {
        _selfRef = this;
        
        this.isReady = false;
        this.partition = config.partition || 0;
        this.attributes = config.attributes || 0;
        logger.info(' streamPublisher constructor');

        this.client = new Client(config.zookeeper||config.url);
        this.producer = new Producer(this.client, {
            requireAcks: 1
        });
        this.producer.on('ready',
            function () {
                _selfRef.isReady = true;
                logger.info('Producer is Ready');
                // if there is topics to be initialized, create them
                if (config.initTopics) {
                    _selfRef.producer.createTopics(config.initTopics, true, function (err) {
                        if (err)
                            logger.error('Error creating topics', err);
                    });
                }

            }
        );
        this.producer.on('error', function (err) {
            logger.info('Producer init Error', err);
        });
        return this;
    }
};

streamPublisher.prototype.createTopic = function (topic, cb) {
    this.producer.createTopics([topic], true, cb);
}

streamPublisher.prototype.connect = function (cb) {

    _selfRef = this;
    this.producer.on('ready',
        function () {
            _selfRef.isReady = true;
            logger.info('Producer is Ready');
            cb(undefined, true)
        }
    );
    this.producer.on('error', function (err) {
        logger.info('Producer init Error', err);
        cb(err)
    });
}

streamPublisher.prototype.publishMessage = function (topic, header, message, cb) {
    logger.debug('Publishing event to: ', topic);
    _selfRef = this;
    var messageEnv = {
        topic: topic,
        id: new ObjectID().toString(),
        created: Date.now(),
        host: os.hostname(),
        header: header,
        data: message
    };

    if (!_selfRef.isReady) {
        logger.info(' Publisher is not ready');
        cb(undefined, ' Publisher is not ready');
    } else {
        this.producer.send([{
            topic: topic,
            partition: _selfRef.partition,
            messages: [JSON.stringify(messageEnv)],
            attributes: _selfRef.attributes
        }], function (err, result) {
            if (err) {
                logger.error('Error:', err.message);
                if (cb)
                    cb(err)
            } else {
                logger.debug('publishEvent:', JSON.stringify(err || result));
                if (cb)
                    cb(undefined, result)
            }
        });
    }
}

module.exports = streamPublisher;