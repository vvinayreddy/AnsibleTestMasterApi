var kafka = require('kafka-node');
var Producer = kafka.Producer;
var Client = kafka.Client;
var logger = require('log4js').getLogger('streamPublisher');
var ObjectID = require("bson-objectid");
const os = require('os');

// will be depricated
function StreamPublisher() {

    this.config = undefined;
    this.topic = undefined;
    this.producer = undefined;
    this.p = 0;
    this.a = 0;
    this.isReady = false;
    _selfPublisher = this;

    return {
        init: function (config, cb) {
            _selfPublisher.config = config;
            _selfPublisher.topic = config.topic;

            var client = new Client(config.zookeeper);

            _selfPublisher.producer = new Producer(client, {
                requireAcks: 1
            });
            logger.info(' in Init Publisher function');

            _selfPublisher.producer.on('ready',
                function () {
                    _selfPublisher.isReady = true;
                    logger.info('Producer is Ready');
                    if (cb)
                        cb(undefined, true)
                }
            );

            _selfPublisher.producer.on('error', function (err) {
                logger.error('Producer init Error', err);
                if (cb)
                    cb(err, false)
            });
        },
        connect: function (cb) {
            _selfPublisher.init(_selfPublisher.config, cb);
        },
        createTopic: function (topic, cb) {
            _selfPublisher.producer.createTopics([topic], true, cb);
        },
        publish: function (message, cb) {
            logger.info('Publishing event to: ', _selfPublisher.topic);

            if (!_selfPublisher.isReady) {
                logger.info(' Publisher is not ready');
                cb(undefined, ' Publisher is not ready');
            } else {
                _selfPublisher.producer.send([{
                    topic: _selfPublisher.topic,
                    partition: _selfPublisher.p,
                    messages: [JSON.stringify(message)],
                    attributes: _selfPublisher.a
                }], function (err, result) {
                    logger.info('publishEvent:', JSON.stringify(err || result));
                    cb(undefined, result)
                });
            }
        },
        publishMessage: function (topic, header, message, cb) {
            logger.info('Publishing event to: ', topic);
            var messageEnv = {
                topic: topic,
                id: new ObjectID().toString(),
                created: Date.now(),
                host: os.hostname(),
                header: header,
                data: message
            };

            if (!_selfPublisher.isReady) {
                logger.info(' Publisher is not ready');
                cb(undefined, ' Publisher is not ready');
            } else {
                _selfPublisher.producer.send([{
                    topic: topic,
                    partition: _selfPublisher.p,
                    messages: [JSON.stringify(messageEnv)],
                    attributes: _selfPublisher.a
                }], function (err, result) {
                    if (err) {
                        logger.error('Error:', err.message);
                        cb(err)
                    } else {
                        logger.debug('publishEvent:', JSON.stringify(err || result));
                        cb(undefined, result)
                    }
                });
            }
        }
    }
}

module.exports = StreamPublisher;