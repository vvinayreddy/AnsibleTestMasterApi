var elasticsearch = require('elasticsearch');
var logger = require('log4js').getLogger('elasticSearch');

var es_client = elasticsearch.Client;

function ElasticClient(config) {
    this.config = config;

    this.index_name = config.index;
    this.index_type = config.type;

    this.es_client = new elasticsearch.Client(config);
    var _self = this;
    return {
        ping: function () {
            _self.es_client.ping({
                // ping usually has a 3000ms timeout
                requestTimeout: Infinity,
                // undocumented params are appended to the query string
                hello: "elasticsearch!"
            }, function (error) {
                if (error) {
                    console.trace('elasticsearch cluster is down!');
                } else {
                    console.log('All is well');
                }
            });

        },
        save: function (id, data, cb) {

            _self.es_client.index({
                index: _self.index_name,
                type: _self.index_type,
                id: id,
                body: data,
                refresh: true
            }, cb);
        },
        searchText: function (index, indexType, text, attributes, cb) {
            _self.es_client.search({
                index: index,
                type: indexType,
                body: {
                    _source: attributes,
                      size : 100,
                    query: {
                        bool: {
                            must: [{
                                query_string: {
                                    default_field: "_all",
                                    query: text
                                }
                            }]
                        }
                    }
                }
            }, cb)
        },
        search: function (text, options, cb) {

            var query = {};
            if (options.fields) {
                query = {
                    multi_match: {
                        query: text,
                        fields: options.fields,
                        minimum_should_match: 3,
                        fuzziness: 2
                    }
                }
            } else {
                query = {
                    bool: {
                        must: [{
                            query_string: {
                                default_field: "_all",
                                query: text
                            }
                        }]
                    }
                }
            }

            _self.es_client.search({
                index: options.index || _self.index_name,
                type: options.indexType || undefined,
                body: {
                    _source: options.attributes,
                      size : 100,
                    query: query
                }
            }, cb)
        },
        searchAll: function (text, cb) {
            _self.es_client.search({
                index: _self.index_name,
                //type: indexType,
                body: {
                    _source: _self.config.attributes,
                    size : 100,
                    query: {
                        bool: {
                            must: [{
                                query_string: {
                                    default_field: "_all",
                                    query: text
                                }
                            }]
                        }
                    }
                }
            }, cb)
        },
        searchField: function (index, indexType, field, text, cb) {
            _self.es_client.search({
                index: index,
                type: indexType,
                body: {
                    _source: _self.config.attributes,
                    size : 100,
                    query: {
                        multi_match: {
                            query: text,
                            fields: field,
                            minimum_should_match: 3,
                            fuzziness: 2
                        }
                    }
                }
            }, cb)
        },
        searchFields: function (index, indexType, queryFields, cb) {

            var query = {
                "bool": {
                    "must": []
                }
            }

            queryFields.forEach(function (field) {
                var itemQuery = {};
                if (field.values) {
                    itemQuery.bool = {};
                    itemQuery.bool.should = [];
                    field.values.forEach(function (arrVal) {
                        itemQuery.bool.should.push({
                            "match": {
                                [field.field]: arrVal
                            }

                        })
                    })
                    query.bool.must.push(itemQuery)
                } else if (field.value) {
                    query.bool.must.push({
                        "match": {
                            [field.field]: field.value
                        }

                    })
                } else if (field.text) {
                    query.bool.must.push({

                        "query_string": {
                            "default_field": "_all",
                            "query": field.text
                        }


                    })
                } else if (field.from) {

                }
            })
            logger.debug("Query", JSON.stringify(query));

            _self.es_client.search({
                index: index,
                type: indexType,
                body: {
                    query: query,
                      size : 100
                }
            }, cb)
        }
    }

}

module.exports = ElasticClient;