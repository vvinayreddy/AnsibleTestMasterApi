var ldap = require('ldapjs');
var logger = require('log4js').getLogger();
var util = require('util');
var crypto = require('crypto');


function unbind(client) {
    client.unbind(function (errUnbind) {
        if (errUnbind)
            logger.error(errUnbind);
    });
}

function ldapClient() {
    this.config = undefined;
    this.client = undefined;

    _self = this;

    return {

        init: function (config, cb) {
            _self.config = config;
            _self.client = ldap.createClient({
                url: 'ldap://' + _self.config.host + ':' + _self.config.port
            });
            if (cb)
                cb(undefined, true);
        },
        searchUser: function (user, searchCallback) {
            var searchOpts = {
                filter: util.format("(|(cn=*%s*)(uid=%s))", user, user),
                scope: 'sub',
            };
            _self.client.bind(_self.config.dn, _self.config.secret, function (err) {
                if (err) {
                    logger.error('bind function has Error  ', err);
                    searchCallback(err)
                } else {
                    var searchResults = [];
                    _self.client.search(_self.config.searchBase, searchOpts, function (err, res) {
                        res.on('searchEntry', function (entry) {
                            searchResults.push(entry.object);
                            logger.debug('Search entry: ', JSON.stringify(entry.object));
                        });
                        res.on('end', function (result) {
                            logger.debug('ldap search status: ', result.status);
                            unbind(_self.client);
                            searchCallback(undefined, searchResults)
                        });

                    });
                }
            });
        },
        addUser: function (userObj, addUserCallback) {
            var md5UserPassword = '{MD5}' + crypto.createHash('md5').update(userObj.password).digest('base64');

            var entry = {
                sn: userObj.lastName,
                cn: userObj.lastName,
                displayName: userObj.displayName,
                uid: userObj.username,
                o: userObj.department,
                objectclass: 'inetOrgPerson',
                mail: userObj.email || 'noemail@stackdc.io',
                userPassword: md5UserPassword
            };

            _self.client.bind(_self.config.dn, _self.config.secret, function (err) {
                if (err) {
                    logger.error('bind function has Error in addUser ', err);
                    addUserCallback(err)
                } else {
                    var userDn = util.format('uid=%s,%s', entry.uid, _self.config.searchBase)
                    logger.debug('dn', userDn, entry)
                    _self.client.add(userDn, entry, function (errAdd, resAdd) {
                        if (errAdd) {
                            logger.error('add function has Error - TypeError: ' + errAdd + ' for- ldap.server.controller');
                            console.log(errAdd);
                        } else {
                            _self.client.unbind(function (errUnbind) {
                                logger.debug('add function Executed successfully for- ldap.server.controller');
                                addUserCallback(undefined, resAdd);
                            });
                        }
                    });

                }
            });
        },
        authenticate: function (username, password, authenticateCallback) {
            var userDn = util.format('%s=%s,%s', _self.config.useridAttribute, username, _self.config.searchBase)
            logger.info('authenticate userdn', userDn);

            _self.client.bind(userDn, password, function (err, results) {
                unbind(_self.client);
                if (err) {
                    logger.error('bind function has Error in authenticate ', err);
                    authenticateCallback(err)
                } else {
                    logger.info('User Login sucessfull', results);
                    authenticateCallback(undefined, true);
                }
            });

        },
        authenticateDN: function (userDn, password, authenticateCallback) {
            logger.info('authenticate userdn', userDn);

            _self.client.bind(userDn, password, function (err) {
                unbind(_self.client);
                if (err) {
                    logger.error('bind function has Error in authenticate:', err.message);
                    authenticateCallback(err)
                } else {
                    logger.info('User Login sucessfull', userDn);
                    authenticateCallback(undefined, true);
                }
            });

        }

    }
}

module.exports = ldapClient;